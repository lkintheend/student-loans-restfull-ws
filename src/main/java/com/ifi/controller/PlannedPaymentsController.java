/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.PlannedPayments;
import com.ifi.service.PlannedPaymentsServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/plannedPayments", produces = "application/hal+json")
public class PlannedPaymentsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(PlannedPaymentsController.class);

	private static final String NOT_FOUND ="PlannedPayments not found";

	@Autowired
	private PlannedPaymentsServiceImpl plannedPaymentsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<PlannedPayments> findAll() {
		List<PlannedPayments> list = plannedPaymentsService.findAll();
		return list;
	}


	@GetMapping("{regularOrderId}")
	public PlannedPayments get(@PathVariable("regularOrderId") Integer regularOrderId) {
		final PlannedPayments plannedPayments = plannedPaymentsService.getOne(regularOrderId);
		LOGGER.info("PlannedPayments found : {}", plannedPayments);
		return plannedPayments;
	}

	@PostMapping(consumes = "application/json")
	public PlannedPayments create(@RequestBody PlannedPayments plannedPayments) {
		LOGGER.info("PlannedPayments creation request : {}", plannedPayments);
		if (plannedPaymentsService.exist(plannedPayments)) {
			LOGGER.info("PlannedPayments already exist ! : {}", plannedPayments);
			return null;
		} else {
			final PlannedPayments created = plannedPaymentsService.create(plannedPayments);
			LOGGER.info("Created plannedPayments {}", created);
			return created;
		}
	}

	@PutMapping(value = "{regularOrderId}", consumes = "application/json")
	public PlannedPayments update(@PathVariable("regularOrderId") Integer regularOrderId, @RequestBody PlannedPayments plannedPayments) {
		return plannedPaymentsService.update(plannedPayments);
	}

	@DeleteMapping("{regularOrderId}")
	public void delete(@PathVariable("regularOrderId") Integer regularOrderId) {
		LOGGER.info("PlannedPayments deletion request : {}", resolveIdForLogger(regularOrderId));
		if (plannedPaymentsService.delete(regularOrderId)) {
			LOGGER.info("PlannedPayments succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer regularOrderId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(regularOrderId));
		return ids.toString();
	}

}

