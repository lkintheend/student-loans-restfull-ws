/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.StandardLoans;
import com.ifi.service.StandardLoansServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/standardLoans", produces = "application/hal+json")
public class StandardLoansController {

	private static final Logger LOGGER = LoggerFactory.getLogger(StandardLoansController.class);

	private static final String NOT_FOUND ="StandardLoans not found";

	@Autowired
	private StandardLoansServiceImpl standardLoansService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<StandardLoans> findAll() {
		List<StandardLoans> list = standardLoansService.findAll();
		return list;
	}


	@GetMapping("{standardLoanId}")
	public StandardLoans get(@PathVariable("standardLoanId") Integer standardLoanId) {
		final StandardLoans standardLoans = standardLoansService.getOne(standardLoanId);
		LOGGER.info("StandardLoans found : {}", standardLoans);
		return standardLoans;
	}

	@PostMapping(consumes = "application/json")
	public StandardLoans create(@RequestBody StandardLoans standardLoans) {
		LOGGER.info("StandardLoans creation request : {}", standardLoans);
		if (standardLoansService.exist(standardLoans)) {
			LOGGER.info("StandardLoans already exist ! : {}", standardLoans);
			return null;
		} else {
			final StandardLoans created = standardLoansService.create(standardLoans);
			LOGGER.info("Created standardLoans {}", created);
			return created;
		}
	}

	@PutMapping(value = "{standardLoanId}", consumes = "application/json")
	public StandardLoans update(@PathVariable("standardLoanId") Integer standardLoanId, @RequestBody StandardLoans standardLoans) {
		return standardLoansService.update(standardLoans);
	}

	@DeleteMapping("{standardLoanId}")
	public void delete(@PathVariable("standardLoanId") Integer standardLoanId) {
		LOGGER.info("StandardLoans deletion request : {}", resolveIdForLogger(standardLoanId));
		if (standardLoansService.delete(standardLoanId)) {
			LOGGER.info("StandardLoans succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer standardLoanId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(standardLoanId));
		return ids.toString();
	}

}

