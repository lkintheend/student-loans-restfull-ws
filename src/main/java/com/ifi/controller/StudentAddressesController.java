/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.StudentAddresses;
import com.ifi.service.StudentAddressesServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/studentAddresses", produces = "application/hal+json")
public class StudentAddressesController {

	private static final Logger LOGGER = LoggerFactory.getLogger(StudentAddressesController.class);

	private static final String NOT_FOUND ="StudentAddresses not found";

	@Autowired
	private StudentAddressesServiceImpl studentAddressesService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<StudentAddresses> findAll() {
		List<StudentAddresses> list = studentAddressesService.findAll();
		return list;
	}


	@GetMapping("{studentId}")
	public StudentAddresses get(@PathVariable("studentId") Integer studentId) {
		final StudentAddresses studentAddresses = studentAddressesService.getOne(studentId);
		LOGGER.info("StudentAddresses found : {}", studentAddresses);
		return studentAddresses;
	}

	@PostMapping(consumes = "application/json")
	public StudentAddresses create(@RequestBody StudentAddresses studentAddresses) {
		LOGGER.info("StudentAddresses creation request : {}", studentAddresses);
		if (studentAddressesService.exist(studentAddresses)) {
			LOGGER.info("StudentAddresses already exist ! : {}", studentAddresses);
			return null;
		} else {
			final StudentAddresses created = studentAddressesService.create(studentAddresses);
			LOGGER.info("Created studentAddresses {}", created);
			return created;
		}
	}

	@PutMapping(value = "{studentId}", consumes = "application/json")
	public StudentAddresses update(@PathVariable("studentId") Integer studentId, @RequestBody StudentAddresses studentAddresses) {
		return studentAddressesService.update(studentAddresses);
	}

	@DeleteMapping("{studentId}")
	public void delete(@PathVariable("studentId") Integer studentId) {
		LOGGER.info("StudentAddresses deletion request : {}", resolveIdForLogger(studentId));
		if (studentAddressesService.delete(studentId)) {
			LOGGER.info("StudentAddresses succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer studentId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(studentId));
		return ids.toString();
	}

}

