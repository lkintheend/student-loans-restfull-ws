/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.StudentLoans;
import com.ifi.service.StudentLoansServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/studentLoans", produces = "application/hal+json")
public class StudentLoansController {

	private static final Logger LOGGER = LoggerFactory.getLogger(StudentLoansController.class);

	private static final String NOT_FOUND ="StudentLoans not found";

	@Autowired
	private StudentLoansServiceImpl studentLoansService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<StudentLoans> findAll() {
		List<StudentLoans> list = studentLoansService.findAll();
		return list;
	}


	@GetMapping("{studentLoanId}")
	public StudentLoans get(@PathVariable("studentLoanId") Integer studentLoanId) {
		final StudentLoans studentLoans = studentLoansService.getOne(studentLoanId);
		LOGGER.info("StudentLoans found : {}", studentLoans);
		return studentLoans;
	}

	@PostMapping(consumes = "application/json")
	public StudentLoans create(@RequestBody StudentLoans studentLoans) {
		LOGGER.info("StudentLoans creation request : {}", studentLoans);
		if (studentLoansService.exist(studentLoans)) {
			LOGGER.info("StudentLoans already exist ! : {}", studentLoans);
			return null;
		} else {
			final StudentLoans created = studentLoansService.create(studentLoans);
			LOGGER.info("Created studentLoans {}", created);
			return created;
		}
	}

	@PutMapping(value = "{studentLoanId}", consumes = "application/json")
	public StudentLoans update(@PathVariable("studentLoanId") Integer studentLoanId, @RequestBody StudentLoans studentLoans) {
		return studentLoansService.update(studentLoans);
	}

	@DeleteMapping("{studentLoanId}")
	public void delete(@PathVariable("studentLoanId") Integer studentLoanId) {
		LOGGER.info("StudentLoans deletion request : {}", resolveIdForLogger(studentLoanId));
		if (studentLoansService.delete(studentLoanId)) {
			LOGGER.info("StudentLoans succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer studentLoanId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(studentLoanId));
		return ids.toString();
	}

}

