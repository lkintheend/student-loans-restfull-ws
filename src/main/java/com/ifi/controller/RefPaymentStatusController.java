/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.RefPaymentStatus;
import com.ifi.service.RefPaymentStatusServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/refPaymentStatus", produces = "application/hal+json")
public class RefPaymentStatusController {

	private static final Logger LOGGER = LoggerFactory.getLogger(RefPaymentStatusController.class);

	private static final String NOT_FOUND ="RefPaymentStatus not found";

	@Autowired
	private RefPaymentStatusServiceImpl refPaymentStatusService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<RefPaymentStatus> findAll() {
		List<RefPaymentStatus> list = refPaymentStatusService.findAll();
		return list;
	}


	@GetMapping("{paymentStatusCode}")
	public RefPaymentStatus get(@PathVariable("paymentStatusCode") Integer paymentStatusCode) {
		final RefPaymentStatus refPaymentStatus = refPaymentStatusService.getOne(paymentStatusCode);
		LOGGER.info("RefPaymentStatus found : {}", refPaymentStatus);
		return refPaymentStatus;
	}

	@PostMapping(consumes = "application/json")
	public RefPaymentStatus create(@RequestBody RefPaymentStatus refPaymentStatus) {
		LOGGER.info("RefPaymentStatus creation request : {}", refPaymentStatus);
		if (refPaymentStatusService.exist(refPaymentStatus)) {
			LOGGER.info("RefPaymentStatus already exist ! : {}", refPaymentStatus);
			return null;
		} else {
			final RefPaymentStatus created = refPaymentStatusService.create(refPaymentStatus);
			LOGGER.info("Created refPaymentStatus {}", created);
			return created;
		}
	}

	@PutMapping(value = "{paymentStatusCode}", consumes = "application/json")
	public RefPaymentStatus update(@PathVariable("paymentStatusCode") Integer paymentStatusCode, @RequestBody RefPaymentStatus refPaymentStatus) {
		return refPaymentStatusService.update(refPaymentStatus);
	}

	@DeleteMapping("{paymentStatusCode}")
	public void delete(@PathVariable("paymentStatusCode") Integer paymentStatusCode) {
		LOGGER.info("RefPaymentStatus deletion request : {}", resolveIdForLogger(paymentStatusCode));
		if (refPaymentStatusService.delete(paymentStatusCode)) {
			LOGGER.info("RefPaymentStatus succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer paymentStatusCode) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(paymentStatusCode));
		return ids.toString();
	}

}

