/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.RefLoanStatus;
import com.ifi.service.RefLoanStatusServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/refLoanStatus", produces = "application/hal+json")
public class RefLoanStatusController {

	private static final Logger LOGGER = LoggerFactory.getLogger(RefLoanStatusController.class);

	private static final String NOT_FOUND ="RefLoanStatus not found";

	@Autowired
	private RefLoanStatusServiceImpl refLoanStatusService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<RefLoanStatus> findAll() {
		List<RefLoanStatus> list = refLoanStatusService.findAll();
		return list;
	}


	@GetMapping("{loanStatusCode}")
	public RefLoanStatus get(@PathVariable("loanStatusCode") Integer loanStatusCode) {
		final RefLoanStatus refLoanStatus = refLoanStatusService.getOne(loanStatusCode);
		LOGGER.info("RefLoanStatus found : {}", refLoanStatus);
		return refLoanStatus;
	}

	@PostMapping(consumes = "application/json")
	public RefLoanStatus create(@RequestBody RefLoanStatus refLoanStatus) {
		LOGGER.info("RefLoanStatus creation request : {}", refLoanStatus);
		if (refLoanStatusService.exist(refLoanStatus)) {
			LOGGER.info("RefLoanStatus already exist ! : {}", refLoanStatus);
			return null;
		} else {
			final RefLoanStatus created = refLoanStatusService.create(refLoanStatus);
			LOGGER.info("Created refLoanStatus {}", created);
			return created;
		}
	}

	@PutMapping(value = "{loanStatusCode}", consumes = "application/json")
	public RefLoanStatus update(@PathVariable("loanStatusCode") Integer loanStatusCode, @RequestBody RefLoanStatus refLoanStatus) {
		return refLoanStatusService.update(refLoanStatus);
	}

	@DeleteMapping("{loanStatusCode}")
	public void delete(@PathVariable("loanStatusCode") Integer loanStatusCode) {
		LOGGER.info("RefLoanStatus deletion request : {}", resolveIdForLogger(loanStatusCode));
		if (refLoanStatusService.delete(loanStatusCode)) {
			LOGGER.info("RefLoanStatus succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer loanStatusCode) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(loanStatusCode));
		return ids.toString();
	}

}

