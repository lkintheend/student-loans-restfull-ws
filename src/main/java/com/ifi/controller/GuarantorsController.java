/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.Guarantors;
import com.ifi.service.GuarantorsServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/guarantors", produces = "application/hal+json")
public class GuarantorsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(GuarantorsController.class);

	private static final String NOT_FOUND ="Guarantors not found";

	@Autowired
	private GuarantorsServiceImpl guarantorsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Guarantors> findAll() {
		List<Guarantors> list = guarantorsService.findAll();
		return list;
	}


	@GetMapping("{guarantorId}")
	public Guarantors get(@PathVariable("guarantorId") Integer guarantorId) {
		final Guarantors guarantors = guarantorsService.getOne(guarantorId);
		LOGGER.info("Guarantors found : {}", guarantors);
		return guarantors;
	}

	@PostMapping(consumes = "application/json")
	public Guarantors create(@RequestBody Guarantors guarantors) {
		LOGGER.info("Guarantors creation request : {}", guarantors);
		if (guarantorsService.exist(guarantors)) {
			LOGGER.info("Guarantors already exist ! : {}", guarantors);
			return null;
		} else {
			final Guarantors created = guarantorsService.create(guarantors);
			LOGGER.info("Created guarantors {}", created);
			return created;
		}
	}

	@PutMapping(value = "{guarantorId}", consumes = "application/json")
	public Guarantors update(@PathVariable("guarantorId") Integer guarantorId, @RequestBody Guarantors guarantors) {
		return guarantorsService.update(guarantors);
	}

	@DeleteMapping("{guarantorId}")
	public void delete(@PathVariable("guarantorId") Integer guarantorId) {
		LOGGER.info("Guarantors deletion request : {}", resolveIdForLogger(guarantorId));
		if (guarantorsService.delete(guarantorId)) {
			LOGGER.info("Guarantors succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer guarantorId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(guarantorId));
		return ids.toString();
	}

}

