/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.RefAddressTypes;
import com.ifi.service.RefAddressTypesServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/refAddressTypes", produces = "application/hal+json")
public class RefAddressTypesController {

	private static final Logger LOGGER = LoggerFactory.getLogger(RefAddressTypesController.class);

	private static final String NOT_FOUND ="RefAddressTypes not found";

	@Autowired
	private RefAddressTypesServiceImpl refAddressTypesService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<RefAddressTypes> findAll() {
		List<RefAddressTypes> list = refAddressTypesService.findAll();
		return list;
	}


	@GetMapping("{addressTypeCode}")
	public RefAddressTypes get(@PathVariable("addressTypeCode") Integer addressTypeCode) {
		final RefAddressTypes refAddressTypes = refAddressTypesService.getOne(addressTypeCode);
		LOGGER.info("RefAddressTypes found : {}", refAddressTypes);
		return refAddressTypes;
	}

	@PostMapping(consumes = "application/json")
	public RefAddressTypes create(@RequestBody RefAddressTypes refAddressTypes) {
		LOGGER.info("RefAddressTypes creation request : {}", refAddressTypes);
		if (refAddressTypesService.exist(refAddressTypes)) {
			LOGGER.info("RefAddressTypes already exist ! : {}", refAddressTypes);
			return null;
		} else {
			final RefAddressTypes created = refAddressTypesService.create(refAddressTypes);
			LOGGER.info("Created refAddressTypes {}", created);
			return created;
		}
	}

	@PutMapping(value = "{addressTypeCode}", consumes = "application/json")
	public RefAddressTypes update(@PathVariable("addressTypeCode") Integer addressTypeCode, @RequestBody RefAddressTypes refAddressTypes) {
		return refAddressTypesService.update(refAddressTypes);
	}

	@DeleteMapping("{addressTypeCode}")
	public void delete(@PathVariable("addressTypeCode") Integer addressTypeCode) {
		LOGGER.info("RefAddressTypes deletion request : {}", resolveIdForLogger(addressTypeCode));
		if (refAddressTypesService.delete(addressTypeCode)) {
			LOGGER.info("RefAddressTypes succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer addressTypeCode) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(addressTypeCode));
		return ids.toString();
	}

}

