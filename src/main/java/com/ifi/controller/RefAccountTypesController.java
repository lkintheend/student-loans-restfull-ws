/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.RefAccountTypes;
import com.ifi.service.RefAccountTypesServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/refAccountTypes", produces = "application/hal+json")
public class RefAccountTypesController {

	private static final Logger LOGGER = LoggerFactory.getLogger(RefAccountTypesController.class);

	private static final String NOT_FOUND ="RefAccountTypes not found";

	@Autowired
	private RefAccountTypesServiceImpl refAccountTypesService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<RefAccountTypes> findAll() {
		List<RefAccountTypes> list = refAccountTypesService.findAll();
		return list;
	}


	@GetMapping("{accountTypeCode}")
	public RefAccountTypes get(@PathVariable("accountTypeCode") Integer accountTypeCode) {
		final RefAccountTypes refAccountTypes = refAccountTypesService.getOne(accountTypeCode);
		LOGGER.info("RefAccountTypes found : {}", refAccountTypes);
		return refAccountTypes;
	}

	@PostMapping(consumes = "application/json")
	public RefAccountTypes create(@RequestBody RefAccountTypes refAccountTypes) {
		LOGGER.info("RefAccountTypes creation request : {}", refAccountTypes);
		if (refAccountTypesService.exist(refAccountTypes)) {
			LOGGER.info("RefAccountTypes already exist ! : {}", refAccountTypes);
			return null;
		} else {
			final RefAccountTypes created = refAccountTypesService.create(refAccountTypes);
			LOGGER.info("Created refAccountTypes {}", created);
			return created;
		}
	}

	@PutMapping(value = "{accountTypeCode}", consumes = "application/json")
	public RefAccountTypes update(@PathVariable("accountTypeCode") Integer accountTypeCode, @RequestBody RefAccountTypes refAccountTypes) {
		return refAccountTypesService.update(refAccountTypes);
	}

	@DeleteMapping("{accountTypeCode}")
	public void delete(@PathVariable("accountTypeCode") Integer accountTypeCode) {
		LOGGER.info("RefAccountTypes deletion request : {}", resolveIdForLogger(accountTypeCode));
		if (refAccountTypesService.delete(accountTypeCode)) {
			LOGGER.info("RefAccountTypes succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer accountTypeCode) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(accountTypeCode));
		return ids.toString();
	}

}

