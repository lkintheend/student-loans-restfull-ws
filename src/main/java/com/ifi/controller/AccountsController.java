/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 10:55:15 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifi.controller;

import com.ifi.entity.Accounts;
import com.ifi.service.AccountsServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/accounts", produces = "application/hal+json")
public class AccountsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(AccountsController.class);

	private static final String NOT_FOUND ="Accounts not found";

	@Autowired
	private AccountsServiceImpl accountsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Accounts> findAll() {
		List<Accounts> list = accountsService.findAll();
		return list;
	}


	@GetMapping("{accountId}")
	public Accounts get(@PathVariable("accountId") Integer accountId) {
		final Accounts accounts = accountsService.getOne(accountId);
		LOGGER.info("Accounts found : {}", accounts);
		return accounts;
	}

	@PostMapping(consumes = "application/json")
	public Accounts create(@RequestBody Accounts accounts) {
		LOGGER.info("Accounts creation request : {}", accounts);
		if (accountsService.exist(accounts)) {
			LOGGER.info("Accounts already exist ! : {}", accounts);
			return null;
		} else {
			final Accounts created = accountsService.create(accounts);
			LOGGER.info("Created accounts {}", created);
			return created;
		}
	}

	@PutMapping(value = "{accountId}", consumes = "application/json")
	public Accounts update(@PathVariable("accountId") Integer accountId, @RequestBody Accounts accounts) {
		return accountsService.update(accounts);
	}

	@DeleteMapping("{accountId}")
	public void delete(@PathVariable("accountId") Integer accountId) {
		LOGGER.info("Accounts deletion request : {}", resolveIdForLogger(accountId));
		if (accountsService.delete(accountId)) {
			LOGGER.info("Accounts succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer accountId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(accountId));
		return ids.toString();
	}

}

